@page "/backup/start"
@using Chaincase.UI.Services
@inject UIStateService UiStateService
@inject NavigationManager NavigationManager
@inject StackService StackService
@inject BackUpViewModel BackUpViewModel
@inherits ReactiveComponentBase<BackUpViewModel>

<IonContent class="ion-padding">
    <h1>BACK UP</h1>
    <p>You will be given a list of seed words to write down on paper and keep in a safe place.</p>
    <p>📝</p>
    <p>The seed words together in order with your password are the only way to restore your wallet if your device is lost, broken, stolen, or upgraded.</p>
    <p>This should take 3 minutes</p>
    <IonLabel position="stacked" id="passwordId">Enter Password</IonLabel>
    <div class="@(IsShaking ? "shake" : "")">
        <IonItem>
            <IonPasswordInput aria-labelledby="passwordId" @bind-Value="Password" disabled="@ViewModel.HasNoSeedWords" />
        </IonItem>
    </div>
    <IonButton class="neu-button" OnClick="@TryStartBackUp" expand="block" disabled="@ViewModel.HasNoSeedWords">
        Write Seed Words
    </IonButton>

    <IonButton class="neu-button" OnClick="@TryCloudSync" expand="block">
        Sync with iCloud
    </IonButton>
    @if (ViewModel.HasNoSeedWords)
    {
        <IonCard class="ion-padding" color="warning">
            <IonCardContent>
                <strong>Warning:</strong> This wallet does not have seed words because it
                is from the early Chaincase Beta. Thank you sincerely for your support as an early adopter!

                You can still back up with "Export Wallet File" but the recovery process is more complex. Please
                move funds out of this wallet and create a new one. New wallets have all the latest recovery features.
            </IonCardContent>
        </IonCard>
    }
    <IonLoading @bind-Visible="@ViewModel.IsBusy" />
</IonContent>

@code {
    private string Password;
    private bool IsBusy;
    private bool IsShaking;

    protected override void OnInitialized()
    {
        ViewModel = BackUpViewModel;
        UiStateService.Title = "BACK UP";
    }

    private async Task TryStartBackUp()
    {
        try
        {
            IsShaking = false;
            await ViewModel.InitSeedWords(Password);
            StackPush("/backup/words");
        }
        catch (Exception)
        {
            IsShaking = true;
        }
    }

    private async Task TryCloudSync()
    {
        await ViewModel.UploadToiCloud(Password);
    }

    private void StackPush(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/backup/start");
        });
        NavigationManager.NavigateTo(uri);
    }
}
