@page "/walletinfo"
@inject WalletInfoViewModel vm
@inject UIStateService UiStateService
@inject StackService StackService 
@inject NavigationManager NavigationManager
@using Chaincase.UI.Services
@inherits ReactiveComponentBase<WalletInfoViewModel>

<ion-content class="ion-padding">

    <IonItem button OnClick="@NavigateToAppearance">
        <ion-label>Appearance</ion-label>
    </IonItem>

    <IonItem>
        <ion-label position="floating">ACCOUNT KEY PATH</ion-label>
        <ion-label>@ViewModel.AccountKeyPath</ion-label>
    </IonItem>

    <IonItem>
        <ion-label position="floating">EXTENDED PUBLIC KEY</ion-label>
        <ion-label>@ViewModel.ExtendedAccountPublicKey</ion-label>
    </IonItem>

    <ion-list>
        <ion-list-header>
            <ion-label>KEYS</ion-label>
        </ion-list-header>
        <IonItem button OnClick="@NavigateToBackUp">
            Back Up Seed Words
        </IonItem>
        <IonItem button OnClick="ViewModel.ExportWallet">
            Export Wallet File
        </IonItem>
    </ion-list>

    <ion-list>
        <IonItem button OnClick="ViewModel.ShareDebugLog">
            Share Debug Log
        </IonItem>
    </ion-list>
</ion-content>

@code {

    protected override void OnInitialized()
    {
        ViewModel = vm;
        UiStateService.Title = "WALLET INFO";
    }

    private void NavigateToBackUp()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/walletinfo");
        });
        NavigationManager.NavigateTo("/backup/start");
    }

    private void NavigateToAppearance()
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/walletinfo");
        });
        NavigationManager.NavigateTo("/walletinfo/appearance");
    }
}
