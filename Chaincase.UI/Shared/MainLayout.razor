@inherits LayoutComponentBase 
@using Chaincase.UI.Services
@using Chaincase.Common
@implements IDisposable
@inject UIStateService StateService
@inject StackService StackService
@inject NavigationManager NavigationManager
@inject ThemeSwitcher ThemeSwitcher
@inject Global Global

<ion-split-pane when="sm" content-id="main-content" disabled="@StackService.AnyStackState">
    <ion-page class="ion-page" id="main-content">
        <ion-header>
            <ion-toolbar>
                <ion-buttons slot="start">
                    @if (StackService.AnyStackState)
                    {
                        <ion-back-button @onclick="() => StackService.InvokeStackState()" @onclick:preventDefault="true" default-href="lol"></ion-back-button>
                    }
                </ion-buttons>
                    @if (NavigationManager.Uri == NavigationManager.ToAbsoluteUri("/").ToString()) {
                    <ion-buttons slot="end">
                        <IonButton OnClick='@(() => StackNavigateTo("/walletinfo"))'>
                            <ion-icon slot="icon-only" name="information-circle-outline"></ion-icon>
                        </IonButton>
                    </ion-buttons>

                    }
                <ion-title>@StateService.Title</ion-title>
            </ion-toolbar>
        </ion-header>
        @Body
    </ion-page>
</ion-split-pane>

@code{

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateService.StateChanged += OnStateServiceOnStateChanged;
        StackService.StackStateChanged += OnStateServiceOnStateChanged;
        OnStateServiceOnStateChanged();
        StateService.ThemeChanged += StateServiceOnThemeChanged;
        StateService.SetTheme();
    }

    private void StateServiceOnThemeChanged()
    {
        _ = ThemeSwitcher.ToggleDark(StateService.DarkMode);
    }

    private void OnStateServiceOnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void StackNavigateTo(string uri)
    {
        StackService.PushStackState(async () =>
        {
            await NavigationManager.NavigateBack(null, "/");
        });
        NavigationManager.NavigateTo(uri);
    }

    public void Dispose()
    {
        StateService.StateChanged -= OnStateServiceOnStateChanged;
        StateService.ThemeChanged -= StateServiceOnThemeChanged;
        StackService.StackStateChanged -= OnStateServiceOnStateChanged;
    }
}
